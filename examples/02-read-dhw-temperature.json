[
    {
        "id": "dhw-temp-flow",
        "type": "tab",
        "label": "Read DHW Temperature",
        "disabled": false,
        "info": "This flow demonstrates how to read the Domestic Hot Water (DHW) temperature from a Viessmann device.\n\n**Setup:**\n1. Configure the viessmann-config node with your credentials\n2. Update the function node with your actual installation ID, gateway serial, and device ID\n3. Inject to read the current DHW temperature\n\n**Common DHW Temperature Features:**\n- heating.dhw.sensors.temperature.dhwCylinder\n- heating.dhw.sensors.temperature.dhwCylinder.top\n- heating.dhw.sensors.temperature.hotWaterStorage\n- heating.dhw.sensors.temperature.outlet\n- heating.dhw.temperature.main (target temperature)\n\n**Note:** The exact feature name depends on your device model. Use the device-features node to discover available features on your device."
    },
    {
        "id": "inject-read-dhw",
        "type": "inject",
        "z": "dhw-temp-flow",
        "name": "Read DHW Temp",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 100,
        "wires": [
            [
                "set-dhw-params"
            ]
        ]
    },
    {
        "id": "set-dhw-params",
        "type": "function",
        "z": "dhw-temp-flow",
        "name": "Set Device Parameters",
        "func": "// TODO: Replace these with your actual device parameters\n// You can get these from the discovery flow\nmsg.installationId = 123456;\nmsg.gatewaySerial = \"7571381573112225\";\nmsg.deviceId = \"0\";\n\n// DHW temperature sensor feature\n// Common options (use device-features to discover which one your device has):\n// - heating.dhw.sensors.temperature.dhwCylinder\n// - heating.dhw.sensors.temperature.dhwCylinder.top\n// - heating.dhw.sensors.temperature.hotWaterStorage\n// - heating.dhw.sensors.temperature.outlet\nmsg.feature = \"heating.dhw.sensors.temperature.dhwCylinder\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 100,
        "wires": [
            [
                "read-dhw-temp"
            ]
        ]
    },
    {
        "id": "read-dhw-temp",
        "type": "viessmann-read",
        "z": "dhw-temp-flow",
        "name": "Read DHW Temperature",
        "config": "viessmann-config-1",
        "x": 620,
        "y": 100,
        "wires": [
            [
                "debug-dhw-raw",
                "extract-temp-value"
            ]
        ]
    },
    {
        "id": "debug-dhw-raw",
        "type": "debug",
        "z": "dhw-temp-flow",
        "name": "Raw DHW Data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 60,
        "wires": []
    },
    {
        "id": "extract-temp-value",
        "type": "function",
        "z": "dhw-temp-flow",
        "name": "Extract Temperature",
        "func": "// Extract the temperature value from the response\nif (msg.payload && msg.payload.properties && msg.payload.properties.value) {\n    const tempData = msg.payload.properties.value;\n    const temperature = tempData.value;\n    const unit = tempData.unit || \"celsius\";\n    \n    // Set a simple payload with just the temperature\n    msg.payload = {\n        temperature: temperature,\n        unit: unit,\n        timestamp: msg.payload.timestamp || new Date().toISOString()\n    };\n    \n    // Update node status\n    node.status({\n        fill: \"green\",\n        shape: \"dot\",\n        text: `${temperature}Â°${unit === \"celsius\" ? \"C\" : unit}`\n    });\n    \n    return msg;\n} else {\n    node.error(\"Temperature data not found in response\");\n    node.status({fill: \"red\", shape: \"ring\", text: \"No data\"});\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 100,
        "wires": [
            [
                "debug-dhw-temp"
            ]
        ]
    },
    {
        "id": "debug-dhw-temp",
        "type": "debug",
        "z": "dhw-temp-flow",
        "name": "DHW Temperature",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 100,
        "wires": []
    },
    {
        "id": "comment-1",
        "type": "comment",
        "z": "dhw-temp-flow",
        "name": "Alternative: Read Target DHW Temperature",
        "info": "To read the target (setpoint) temperature instead of the current sensor reading, use:\n\nmsg.feature = \"heating.dhw.temperature.main\";\n\nThis gives you the desired DHW temperature set by the user or system.",
        "x": 200,
        "y": 180,
        "wires": []
    },
    {
        "id": "inject-read-target",
        "type": "inject",
        "z": "dhw-temp-flow",
        "name": "Read Target Temp",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 240,
        "wires": [
            [
                "set-target-params"
            ]
        ]
    },
    {
        "id": "set-target-params",
        "type": "function",
        "z": "dhw-temp-flow",
        "name": "Set Parameters for Target",
        "func": "// TODO: Replace with your actual device parameters\nmsg.installationId = 123456;\nmsg.gatewaySerial = \"7571381573112225\";\nmsg.deviceId = \"0\";\n\n// Target DHW temperature\nmsg.feature = \"heating.dhw.temperature.main\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 240,
        "wires": [
            [
                "read-target-temp"
            ]
        ]
    },
    {
        "id": "read-target-temp",
        "type": "viessmann-read",
        "z": "dhw-temp-flow",
        "name": "Read Target Temperature",
        "config": "viessmann-config-1",
        "x": 630,
        "y": 240,
        "wires": [
            [
                "debug-target-temp"
            ]
        ]
    },
    {
        "id": "debug-target-temp",
        "type": "debug",
        "z": "dhw-temp-flow",
        "name": "Target Temperature",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 240,
        "wires": []
    },
    {
        "id": "viessmann-config-1",
        "type": "viessmann-config",
        "name": "My Viessmann"
    }
]
